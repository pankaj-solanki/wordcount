So far, we've covered the low level basics of thread safety and synchronization. But we don't want to have to analyze
each memory access to ensure that our program is thread safe; we want to be able to take thread safe components and
safely compose them into larger components or programs. This chapter covers patterns for structuring classes that can
make it easier to make them thread safe and to maintain them without accidentally undermining their safety
guarantees.

An object's state starts with its fields. If they are all of primitive type, the fields comprise the entire state. Counter in
Listing 4.1 has only one field, so the value field comprises its entire state. The state of an object with n primitive fields is
just the n tuple of its field values; the state of a 2D Point is its (x, y) value. If the object has fields that are references to
other objects, its state will encompass fields from the referenced objects as well. For example, the state of a
LinkedList includes the state of all the link node objects belonging to the list.
The synchronization policy defines how an object coordinates access to its state without violating its invariants or post
conditions. It specifies what combination of immutability, thread confinement, and locking is used to maintain thread
safety, and which variables are guarded by which locks. To ensure that the class can be analyzed and maintained,
document the synchronization policy.


Making a class thread safe means ensuring that its invariants hold under concurrent access; this requires reasoning
about its state. Objects and variables have a state space: the range of possible states they can take on. The smaller this
state space, the easier it is to reason about. By using final fields wherever practical, you make it simpler to analyze the
possible states an object can be in. (In the extreme case, immutable objects can only be in a single state.)
Many classes have invariants that identify certain states as valid or invalid. The value field in Counter is a long. The
state space of a long ranges from Long.MIN_VALUE to Long.MAX_VALUE, but Counter places constraints on value;
negative values are not allowed.
Similarly, operations may have post conditions that identify certain state transitions as invalid. If the current state of a
Counter is 17, the only valid next state is 18. When the next state is derived from the current state, the operation is
necessarily a compound action. Not all operations impose state transition constraints; when updating a variable that
holds the current temperature, its previous state does not affect the computation.
Constraints placed on states or state transitions by invariants and post conditions create additional synchronization or
encapsulation requirements. If certain states are invalid, then the underlying state variables must be encapsulated,
otherwise client code could put the object into an invalid state. If an operation has invalid state transitions, it must be

made atomic. On the other hand, if the class does not impose any such constraints, we may be able to relax
encapsulation or serialization requirements to obtain greater flexibility or better performance.
A class can also have invariants that constrain multiple state variables. A number range class, like NumberRange in Listing
4.10, typically maintains state variables for the lower and upper bounds of the range. These variables must obey the
constraint that the lower bound be less than or equal to the upper bound. Multivariable invariants like this one create
atomicity requirements: related variables must be fetched or updated in a single atomic operation. You cannot update
one, release and reacquire the lock, and then update the others, since this could involve leaving the object in an invalid
state when the lock was released. When multiple variables participate in an invariant, the lock that guards them must
be held for the duration of any operation that accesses the related variables.
